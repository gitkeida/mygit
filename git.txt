git 命令：
    git init    # 初始化目录 创建仓库

    git add test.txt    # 添加 test.txt  把文件添加到仓库（提交修改到暂存区）

    git commit -m "this a test file"    # 提交 -m后面输入的是本次提交的说明 （把暂存区的内容提交到当前分支）

 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：

    $ git add file1.txt
    $ git add file2.txt file3.txt
    $ git commit -m "add 3 files."


    git status      # 查看仓库状态
    git diff readme.txt    # 查看文件差异 （修改过的内容）

    git log         # 查看历史修改记录	按 Q 退出
    git log --pretty=oneline        # 简化显示提交历史，每条只显示一行

    在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^。当然往上100个版本写成HEAD~100。

    git reset --hard HEAD^      # 返回上一个版本
    git reset --hard <63dbd>    # 返回到指定版本 <63dbd> 为commit_id  git reset --hard 63dbd

    git reflog      # 显示记录的每一次命令

    git diff HEAD -- readme.txt     # 查看当前文件和 版本库文件差异
    git checkout -- readme.txt      # 丢弃工作区域的修改 （把readme.txt文件在工作区的修改全部撤销）（其实就是用版本库里的文件替换工作区域的文件）
    git reset HEAD readme.txt       # 丢弃暂存区的修改

    git rm test.txt         # 用于删除一个文件


远程库：
    git remote add origin git@github.com:gitkeida/mygit.git 		# 关联远程库 （把本地的库和远程库关联）
    git clone git@github.com:gitkeida/mygit.git			# 克隆远程库 （把远程的库克隆到本地）
    git push -u origin master 		# 关联后第一次 推送到远程库 master 分支
    
   此后，每次本地提交后，就可以使用命令推送最新修改
    git push origin master 	# 推送到远程库

分支：
    创建+切换分支：
	git checkout -b dev 

	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

		$ git branch dev
		$ git checkout dev
    查看分支：
	git branch
    
    切换分支：
	git checkout master

    合并分支：
	git merge dev  	#git merge命令用于合并指定分支到当前分支

    删除分支：
	git branch -d dev    # 大写 -D 为强行删除

    总结：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>

   git log --graph  # 可以看到分支合并图


Bug 分支：
   保存工作现场：
      git stash  	# 把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
   
   查看工作现场：
      git stash list 

   恢复工作现场：
      git stash apply

   删除工作现场
      git stash drop    # 工作现场恢复后，仍有保存在工作现场的数据，所以需要删除
   
   恢复并删除：
      git stash pop

多人协作：
   查看远程库信息：
      git remote     # 查看详细信息：  git remote -v

